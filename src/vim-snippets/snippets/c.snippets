## Main
# main
snippet main
	int	main(int argc, const char **argv)
	{
		${0}
		return (0);
	}
# main(void)
snippet mainn
	int	main(void)
	{
		${0}
		return (0);
	}
##
## Preprocessor
# #include <...>
snippet inc
	#include <${0:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	# define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
# Disable C++ name mangling in C headers
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif
##
## Control Statements
# if
snippet if
	if (${1})
	{
		${0}
	}
snippet ife
	if (${1})
	{
		${2}
	}
	else
	{
		${0}
	}
# else
snippet el
	else
	{
		${0}
	}
# else if
snippet elif
	else if (${1})
	{
		${0}
	}
# ifi
snippet ifi
	if (${1})
		${0}
# ternary
snippet t
	(${1}) ? ${2} : ${3}
# switch
snippet switch
	switch (${1})
	{
		case ${2}:
			${3}
			break;
		default:
			${4}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */})
	{
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
snippet ret
	return (${0});
##
## Loops
# while
snippet while
	while (${1})
	{
		${0}
	}
# do... while
snippet do
	do
	{
		${0}
	}	while (${1});
##
## Functions
# function definition
snippet fun
	${1:void}	${2:function}(${3})
	{
		${4}
	}
# function definition with zero parameters
snippet fun0
	${1:void}	${2:function}(void)
	{
		${3}
	}
# function definition with one parameter
snippet fun1
	${1:void}	${2:function}(${3:type_t} ${4:var})
	{
		${5}
	}
# function definition with two parameters
snippet fun2
	${1:void}	${2:function}(${3:type_t} ${4:var1}, ${5:type_t} ${6:var2})
	{
		${7}
	}
# function definition with three parameters
snippet fun3
	${1:void}	${2:function}(${3:type_t} ${4:var1}, ${5:type_t} ${6:var2}, ${7:type_t} ${8:var3})
	{
		${9}
	}
# function definition with four parameters
snippet fun3
	${1:void}	${2:function}(${3:type_t} ${4:var1}, ${5:type_t} ${6:var2}, ${7:type_t} ${8:var3}, ${9:type_t} ${10:var4})
	{
		${11}
	}

# function declaration
snippet fund
	${1:void}	${2:function}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	/*! \struct $1
	 *  \brief ${3:Brief struct description}
	 *
	 *  ${4:Detailed description}
	 */
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};
# typedef struct
snippet tds
	/*! \struct $2
	 *  \brief ${5:Brief struct description}
	 *
	 *  ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*! \enum $1
	 *
	 *  ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };
# typedef enum
snippet tde
	/*! \enum $2
	 *
	 *  ${4:Detailed description}
	 */
	typedef enum
	{
		${1:Data} /*!< ${3:Description} */
	}	${2:foo};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n", ${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
snippet prd
	printf("${1:} = %d\n", $1);
snippet prf
	printf("${1:} = %f\n", $1);
snippet prx
	printf("${1:} = %${2}\n", $1);
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
##
# TODO section
snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
